Django funciona no modo mvt model > view > template
models.py   # BASE DE DADOS ... qlqr tipo de dados
views.py    # FISICO DO SITE BACKEND ... render

pip install python-dotenv # manage.py, wsgi.py, asgi.py from dotenv | import load_dotenv > load_dotenv()
.env # cria variaveis de sistema, precisa reiniciar o servidor para validar

pip install djangorestframework-simplejwt  # para rest-framework autenticação

pip install parameterized  # FAZ UM LOOP COM AS VARIAVEIS EM UMA FUNÇÃO (tests_farma_models.py tem um exemplo)
pip install coverage  # GERADOR DE LOGS de testes disponiveis e feitos (comando: coverage run -m pytest )
                                                                        comando: coverage html     (cria o html log)


pip install selenium  # SELENIUM FAZ TESTES "FISICOS" DIRETO NO NAVEGADOR, PRA FUNCIONAR TEM DE BAIXAR O DRIVER DO
    # NAVEGADOR QUE DESEJA USAR DE ACORDO COM A VERSÃO DO PROCESSADOR TBM (UM EXEMPLO NO "UTILITY/BROWSER.PY")

python manage.py makemessages -l "pt_br" -i 'venv'   # o -i 'venv' é para ele ignorar o ambiete virtual
python manage.py compilemessages -l "pt_br" -i 'venv'   # o -i 'venv'  compile to compile kk

ALLOWED_HOSTS: list[str] = [] # : list[str] is like typeof

Em models.py:

    def __str__(self):
        return self.name  # !IMPORTANT ISSO FARA COM QUE NO ADMIN DO DJANGO RETORNE O NOME DO OBJETO
# DEPOIS DE QUALQUER MUDANÇA EM MODELS É IMPORTANTE FAZER O python manage.py migrate, se trocar o nome de uma tabela
# deve usar o python manage.py makemigrations antes.
######################################################################################################################
Na pasta templates é onde fica o codigo html, no django vc só passa o nome do arquivo tipo(index.html) e ele procura lá
settings.py:

    INSTALLED_APPS = [
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        # NOSSO APP:
>       "recipes"  <<<<<<<<<< adicionar nossa pasta do app (assim ele encontra os caminhos durante a criação do pgm)
    ]
    ...
    ...
    TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [   BASE_DIR / "caminhho__(like: base_templates)"  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                ],
            },
        },
    ]
    ...
    ...
>   # ARQUIVOS DE TRADUÇÃO
    # add em middlewares: >> "django.middleware.locale.LocaleMiddleware",

    LOCALE_PATHS = [
        BASE_DIR / 'locale',
    ]
    ...
    ...
>   # PLURAL DE PASTAS COM ARQUIVOS ESTATICOS (ARQUIVOS ESTATICOS SERVEM PARA OTIMIZAR OS REQUEST AO SERVIDOR
    STATICFILES_DIRS = [
        BASE_DIR / 'pasta_static',
    ]

    STATIC_ROOT = BASE_DIR / 'static'
>   # STATIC_ROOT serve pra usar o comando  " python manage.py collectstatic " que serve para deploy dos arquivos no servidor
>   # EM urls.py :add >>>urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

>   # MEDIA URL E MEDIA ROOT SERVEM PARA DEFINIR ONDE SERA SALVO AO ARQUIVOS QUE OS USUARIOS ADICIONAREM
>   # EM urls.py :add >>>from django.conf import settings
>   # EM urls.py :add >>>urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'

    ...
    ...
    # ISSO SERVE PARA DECLARAR O CSS NO CASO A CLASS
    MESSAGE_TAGS = {
    constants.WARNING: 'message-warning',
    constants.ERROR: 'message-error',
    constants.SUCCESS: 'message-success',
    constants.INFO: 'message-info',
    constants.DEBUG: 'message-debug',
    }